{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"J:\\\\Reactjs\\\\image-upload\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport { useState } from 'react';\nimport ImageUploader from 'react-images-upload';\nimport Axios from 'axios';\n\nconst UploadComponent = props => /*#__PURE__*/_jsxDEV(\"form\", {\n  children: [/*#__PURE__*/_jsxDEV(\"label\", {\n    children: [\"File Upload URL:\", /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"urlInput\",\n      type: \"text\",\n      onChange: props.onUrlChange,\n      value: props.url\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }, this), /*#__PURE__*/_jsxDEV(ImageUploader, {\n    withIcon: true,\n    singleImage: true,\n    withPreview: true,\n    label: \"Maximum size file: 5MB\",\n    buttonText: \"Choose an image\",\n    onChange: props.onImage,\n    imgExtension: ['.jpg', '.png', '.jpeg'],\n    maxFileSize: 5242880\n  }, \"image-uploader\", false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 7\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 3\n}, this); // const UploadComponent=props => {\n//   <form>\n//     <label>\n//       File Upload URL:\n//       <input id='urlInput' type='text' onChange={props.onUrlChange} value={props.url}></input>\n//     </label>\n//     <ImageUploder\n//       key='image-uploader'\n//       withIcon={true}\n//       SingleImage={true}\n//       withPreview={true}\n//       label=\"Maximum size file: 5MB\"\n//       buttonText='Choose an Image'\n//       onChange={props.onImage}\n//       imageExtension={['.jpg','.png','jpeg']}\n//       maxFileSize={5242880}></ImageUploder>\n//   </form>\n// }\n\n\n_c = UploadComponent;\n\nconst App = () => {\n  _s();\n\n  const [progress, setProgress] = useState('getUplaod');\n  const [url, setImageURL] = useState(undefined);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const onUrlChange = e => {\n    setImageURL(e.target.value);\n  };\n\n  const onImage = async (failedImages, successImages) => {\n    if (!url) {\n      console.log('missing Url');\n      setErrorMessage('missing a url to upload');\n      setProgress('uploadError');\n      return;\n    }\n\n    setProgress('uploading');\n\n    try {\n      console.log('successImages', successImages);\n      const parts = successImages[0].split(':');\n      const mine = parts[0].split(':')[1];\n      const name = parts[1].split('=')[1];\n      const data = parts[2];\n      const res = await Axios.post(url, {\n        mine,\n        name,\n        image: data\n      });\n      console.log(res);\n      setImageURL(res.data.imageURL);\n      setProgress('uploaded');\n    } catch (error) {\n      console.log('error in upload', error);\n      setErrorMessage(error.message);\n      setProgress('uploadError');\n    }\n  };\n\n  const content = () => {\n    switch (progress) {\n      case 'getUplaod':\n        return /*#__PURE__*/_jsxDEV(UploadComponent, {\n          onUrlChange: onUrlChange,\n          onImage: onImage,\n          url: url\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 16\n        }, this);\n\n      case 'uploading':\n        return /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Uploading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 16\n        }, this);\n\n      case 'uploaded':\n        return /*#__PURE__*/_jsxDEV(\"img\", {\n          scr: url,\n          alt: \"uploaded\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 16\n        }, this);\n\n      case 'uploadError':\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [\"Error Message=\", errorMessage]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(UploadComponent, {\n            onUrlChange: onUrlChange,\n            onImage: onImage,\n            url: url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Image Upload \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), content()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"YbG3fTYp91TvPjZpIE6qxg7XvLk=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"UploadComponent\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["J:/Reactjs/image-upload/src/App.js"],"names":["useState","ImageUploader","Axios","UploadComponent","props","onUrlChange","url","onImage","App","progress","setProgress","setImageURL","undefined","errorMessage","setErrorMessage","e","target","value","failedImages","successImages","console","log","parts","split","mine","name","data","res","post","image","imageURL","error","message","content"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';\nimport ImageUploader from 'react-images-upload';\nimport Axios from 'axios';\nconst UploadComponent = props => (\n  <form>\n      <label>\n          File Upload URL:\n          <input id=\"urlInput\" type=\"text\" onChange={props.onUrlChange} value={props.url}></input>\n      </label>\n      <ImageUploader\n          key=\"image-uploader\"\n          withIcon={true}\n          singleImage={true}\n          withPreview={true}\n          label=\"Maximum size file: 5MB\"\n          buttonText=\"Choose an image\"\n          onChange={props.onImage}\n          imgExtension={['.jpg', '.png', '.jpeg']}\n          maxFileSize={5242880}\n      ></ImageUploader>\n  </form>\n);\n\n// const UploadComponent=props => {\n//   <form>\n//     <label>\n//       File Upload URL:\n//       <input id='urlInput' type='text' onChange={props.onUrlChange} value={props.url}></input>\n//     </label>\n//     <ImageUploder\n//       key='image-uploader'\n//       withIcon={true}\n//       SingleImage={true}\n//       withPreview={true}\n//       label=\"Maximum size file: 5MB\"\n//       buttonText='Choose an Image'\n//       onChange={props.onImage}\n//       imageExtension={['.jpg','.png','jpeg']}\n//       maxFileSize={5242880}></ImageUploder>\n//   </form>\n// }\n\nconst App = () => {\n\n  const [progress,setProgress] = useState ('getUplaod')\n  const [url, setImageURL] = useState (undefined)\n  const [errorMessage, setErrorMessage]= useState('')\n  const onUrlChange = e => {\n    setImageURL(e.target.value);\n  };\n  const onImage=async(failedImages, successImages) => {\n    if (!url)\n    {\n      console.log('missing Url')\n      setErrorMessage('missing a url to upload')\n      setProgress('uploadError');\n      return\n    }\n    setProgress('uploading');\n  \n      try {\n        console.log('successImages',successImages);\n        const parts = successImages[0].split(':')\n        const mine= parts[0].split(':')[1];\n        const name= parts[1].split('=')[1];\n        const data=parts[2];\n        const res=await Axios.post(url, {mine, name, image:data});\n        console.log(res);\n        setImageURL(res.data.imageURL)\n        setProgress('uploaded')\n      }\n    \n      catch (error){\n        console.log('error in upload',error);\n        setErrorMessage(error.message);\n        setProgress('uploadError')\n\n      }\n  }\n  const content = () =>\n  {\n    switch(progress){\n      case 'getUplaod':\n        return <UploadComponent onUrlChange={onUrlChange} onImage={onImage} url={url}/>\n      case 'uploading':\n        return <h2>Uploading...</h2>\n      case 'uploaded':\n        return <img scr={url} alt='uploaded' />\n      case 'uploadError':\n        return (\n          <>\n          <div>Error Message={errorMessage}</div>\n          <UploadComponent onUrlChange={onUrlChange} onImage={onImage} url={url}/>\n          </>\n        )\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Image Upload </h1>\n      {content()}\n    </div>\n  )\n}\n\n\nexport default App"]},"metadata":{},"sourceType":"module"}